// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(uuid())
  name           String
  email          String             @unique
  password       String
  createdAt      DateTime?          @default(now())
  updatedAt      DateTime?          @default(now())
  purchasedItems PurchasedItem[]
  sellingItems   SellingItem[]
  ownedSkins     CategoryNameSkin[] @relation("UserOwnedSkins")
  purchases      Order[]            @relation("UserPurchases")
  sales          Order[]            @relation("UserSales")

  @@map("users")
}

model Order {
  id            String      @id @default(uuid())
  sellingItemId String      @unique // 1 pedido por an√∫ncio
  buyerId       String
  sellerId      String
  pricePaid     String
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())

  sellingItem SellingItem @relation(fields: [sellingItemId], references: [id])
  buyer       User        @relation("UserPurchases", fields: [buyerId], references: [id])
  seller      User        @relation("UserSales", fields: [sellerId], references: [id])


  @@index([buyerId])
  @@index([sellerId])
  @@map("orders")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryItems CategoryItem[]
  @@map("categorys")
}

model CategoryItem {
  id         String   @id @default(uuid())
  categoryId String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category          Category           @relation(fields: [categoryId], references: [id])
  categoryNameSkins CategoryNameSkin[]
  @@map("categoryItems")
}

model CategoryNameSkin {
  id             String   @id @default(uuid())
  categoryItemId String
  name           String
  float          Decimal  @db.Decimal(12, 11)
  sellerName     String
  price          String
  wear           String
  imageUrl       String
  ownerId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt


  categoryItem   CategoryItem    @relation(fields: [categoryItemId], references: [id])
  owner          User            @relation("UserOwnedSkins", fields: [ownerId], references: [id])
  purchasedItems PurchasedItem[] @relation("SkinPurchasedItems")
  sellingItems   SellingItem[]   @relation("SkinSellingItems")

  @@map("categoryNameSkins")
}

model PurchasedItem {
  id          String   @id @default(uuid())
  userId      String
  skinId      String
  purchasedAt DateTime @default(now())

  user User             @relation(fields: [userId], references: [id])
  skin CategoryNameSkin @relation("SkinPurchasedItems", fields: [skinId], references: [id])
  @@map("PurchasedItems")
}

model SellingItem {
  id       String   @id @default(uuid())
  userId   String
  skinId   String
  price    Float
  listedAt DateTime @default(now())

  user  User             @relation(fields: [userId], references: [id])
  skin  CategoryNameSkin @relation("SkinSellingItems", fields: [skinId], references: [id])
  order Order?


  @@index([userId])
  @@index([skinId])
  @@index([price])
  @@map("SellingItems")
}

enum OrderStatus {
  PENDING
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  FINISHED
  CANCELED
}
